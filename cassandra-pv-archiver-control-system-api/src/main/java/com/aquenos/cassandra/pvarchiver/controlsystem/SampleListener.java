/*
 * Copyright 2015-2016 aquenos GmbH.
 * All rights reserved.
 * 
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License v1.0 which accompanies this distribution,
 * and is available at http://www.eclipse.org/legal/epl-v10.html.
 */

package com.aquenos.cassandra.pvarchiver.controlsystem;

/**
 * Listener that is notified of new samples for a control-system channel. This
 * listener is how the archiving code gets notified when the control-system
 * support for a channel receives a new sample that shall be archived.
 * 
 * @author Sebastian Marsching
 *
 * @param <SampleType>
 *            type that is implemented by all samples that are generated by the
 *            control-system support to which this listener got passed.
 */
public interface SampleListener<SampleType extends Sample> {

    /**
     * <p>
     * Notifies the listener that a new sample is available. This method is
     * called by the control-system support for the associated channel when it
     * detects that the value of the channel has changed in the control-system
     * and the new value is archived.
     * </p>
     * 
     * <p>
     * In general, it is expected that samples are received with incrementing
     * time stamps. However, the archiving code will silently discard samples
     * that skip back in time, so the control-system support does not have to
     * check time stamps explicitly.
     * </p>
     * 
     * <p>
     * The <code>channel</code> that is passed to this method must be the exact
     * instance that was returned from the call to
     * {@link ControlSystemSupport#createChannel(String, java.util.Map, SampleBucketId, SampleListener)}
     * to which this sample listener got passed. This is important because the
     * archiving code tests the <code>channel</code> for object identity in
     * order to ensure that it does not accidentally process samples for
     * control-system channel instances that have been destroyed.
     * </p>
     * 
     * <p>
     * After queuing the sample and processing it internally, the archiving code
     * will eventually call
     * {@link ControlSystemSupport#writeSample(Sample, SampleBucketId, int)} in
     * order to write the sample to the database.
     * </p>
     * 
     * <p>
     * The code calling this method can expect that it will not block and will
     * return quickly.
     * </p>
     * 
     * @param channel
     *            channel instance that received the specified
     *            <code>sample</code>.
     * @param sample
     *            sample that was received.
     * @param estimatedSampleSize
     *            estimated size of the sample when serialized into the database
     *            (in bytes). This information is used by the archiving code to
     *            keep track of the total size of the samples that are stored
     *            inside a bucket. As storing too much (or too little) data in a
     *            single bucket has an impact on performance, the archiving code
     *            will decide to start a new bucket when a certain size has been
     *            reached. Therefore, this estimate should be as accurate as
     *            possible.
     */
    void onSampleReceived(ControlSystemChannel channel, SampleType sample,
            int estimatedSampleSize);

}
